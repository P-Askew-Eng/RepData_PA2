list.files("./data")
setwd("data")
getwd()
head(house.csv)
head("house.csv")
heads("house.csv")
head('house.csv')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
install.packages("xlsx")
Quiz1.R
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
Quiz1.R
Quiz1
getwd()
setwd(//)
setwd("C:/Users/Paul Askew/Coursera")
Quiz1.R
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
ans
install.packages("XML")
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(XML)
doc<-xmlTreePars(fileURL,useInternal=TRUE)
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
ans
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
xmlName(rootNode)
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
names(rootNode)
rootNode[1]
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
selector
zipcodes
xmlValue()
xmlValue('zipcode')
xpathSApply(rootNode,"//zipcode",xmlValue)
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
xpathSApply(rootNode,"//zipcode",xmlValue)
?fread
??fread()
?fread()
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
install.packages("data.table")
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
?rowMeans
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
install.packages("fread")
system.time(replicate(1000,sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(1000,mean(DT$pwgtp15,by=DT$SEX)))
system.time(replicate(1000,rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]))
system.time(replicate(1000,(rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]))
system.time(replicate(1000,(rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2])))
system.time(replicate(1000,{rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]}))
system.time(replicate(1000,tapply(DT$pwgtp15,DT$SEX,mean)))
system.time(replicate(1000,DT[,mean(pwgtp15),by=SEX]))
system.time(replicate(1000,mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(replicate(1000,{mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}))
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
swirl()
library(swirl)
library(swirl)
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r-version=="3.1.1",country="US")
filter(cran,r-version=="3.1.1",country=="US")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US" | country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,r_version==!is.na())
filter(cran,!is.na(r_version))
cran2<-seelct(cran,size:ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(cran,avg_bytes=mean(size))
summarize(cran,mean(size))
summarize(by_package,mean(size))
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
submit(summarize1)
submit()
reset()
# Compute four values, in the following order, from
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
?n
?n_distinct
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
avg_bytes = mean(size))
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
swirl()
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
submit()
swirl()
submit()
reset()
swirl()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
swirl()
library(swirl)
swirl()
submit()
pack_sum
quantile(pack_sum$count, probs =0.99)
top_counts<-filter(pack_sum,counts>679)
top_counts<-filter(pack_sum,count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_uniquw_sorted<-arrange(top_unique,desc(unique()))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
SUBMIT()
submit()
submit()
View(result3)
submit()
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpO8hniN/chain1.R')
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpO8hniN/chain1.R')
submit()
submit()
submit()
submit()
submit()
source('~/.active-rstudio-document', echo=TRUE)
head(stormhealth)
head(storm)
?mutate
?toupper
source('~/.active-rstudio-document', echo=TRUE)
head(stormhealth)
head(storm)
stormhealth
#stormhealth<-aggregate(storm$HEALTHIMP,list(event=storm$EVTYPE), FUN="sum")
#healthtop10<-stormhealth[order(stormhealth$event,decreasing=TRUE),]
#healthtop10<-healthtop10[1:10,]
stormhealth<-storm%>%group_by(.EVTYPE)%>%summarize(fatalities=sum(as.numeric(FATALITIES)), injuries=sum(as.numeric(INJURIES)), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
data.health<-stormhealth%>%select(EVTYPE, fatalities, injuries)%>%arrange(desc(HEALTHIMP))
head(data.health)
head(storm)
stormhealth<-group_by(storm,EVTYPE)
head(stormhealth)
stromhealth
stormhealth
stormhealth<-group_by(storm,EVTYPE)
by_weather<-stormhelath%>%summarize(fatalities=sum(as.numeric(FATALITIES)), injuries=sum(as.numeric(INJURIES)), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
data.health<-by_weather%>%select(EVTYPE, fatalities, injuries)%>%arrange(desc(HEALTHIMP))
head(data.health)
stormhealth<-group_by(storm,EVTYPE)
by_weather<-stormhealth%>%summarize(fatalities=sum(as.numeric(FATALITIES)), injuries=sum(as.numeric(INJURIES)), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
data.health<-by_weather%>%select(EVTYPE, fatalities, injuries)%>%arrange(desc(HEALTHIMP))
head(data.health)
head(by_weather)
by_weather
stormhealth
by_weather<-summarize(group_by(storm,EVTYPE),fatalities=sum(as.numeric(FATALITIES)), injuries=sum(as.numeric(INJURIES)), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
head(by_weather)
by_weather
str(storm)
str(stormhealth)
length(levels(storm$EVTYPE))
str(StormData)
?as.factor
source('~/.active-rstudio-document', echo=TRUE)
str(StormData)
str(stormhealth)
str(storm)
head(by_weather)
by_weather
head(stormhealth)
stormhealth
length(levels(storm$EVTYPE))
data.r<-storm%>%group_by(EVTYPE)%>%summarize(fatalities=sum(FATALITIES), injuries=sum(INJURIES), property.damage=sum(ABSPROPDMG), crop.damage=sum(ABSCROPDMG))
storm
head(storm)
data.r<-storm%>%group_by(EVTYPE)%>%summarize(fatalities=sum(FATALITIES), injuries=sum(INJURIES), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
head(data.r)
data.r<-group_by(storm, EVTYPE)%>%summarize(fatalities=sum(FATALITIES), injuries=sum(INJURIES), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
head(data.r)
data.r<-summarize(group_by(storm, EVTYPE),stormfatalities=sum(FATALITIES), injuries=sum(INJURIES), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
head(data.r)
data.r<-summarize(group_by(storm$EVTYPE),stormfatalities=sum(FATALITIES), injuries=sum(INJURIES), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
head(storm)
str(storm)
data.r<-summarize(group_by(EVTYPE),sum(FATALITIES), sum(INJURIES), sum(PROPDMG2), sum(CROPDMG2))
data.r<-summarize(group_by(storm,EVTYPE),sum(FATALITIES), sum(INJURIES), sum(PROPDMG2), sum(CROPDMG2))
head(data.r)
data.r<-summarize(storm,EVTYPE,sum(FATALITIES), sum(INJURIES), sum(PROPDMG2), sum(CROPDMG2))
data.r<-group_by(storm,EVTYPE,sum(FATALITIES), sum(INJURIES), sum(PROPDMG2), sum(CROPDMG2))
head(data.r)
stormhealth<-group_by(storm,EVTYPE)
by_weather<-summarize_each(stormhealth,fatalities=sum(as.numeric(FATALITIES)), injuries=sum(as.numeric(INJURIES)), property.damage=sum(PROPDMG2), crop.damage=sum(CROPDMG2))
data.health<-by_weather%>%select(EVTYPE, fatalities, injuries)%>%arrange(desc(HEALTHIMP))
head(stormhealth)
head(by_weather)
stormhealth<-group_by(storm,EVTYPE)
stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
head(stormhealth)
stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
stormhealth<-group_by(storm,EVTYPE)
helathsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
head(healthsum)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
head(healthsum)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
head(healthsum)
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES),decreasing=TRUE]
head(healthtop10)
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES)]
head(healthtop10)
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES),]
head(healthtop10)
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),]
head(healthtop10)
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
healthtop10
?ggplot
?ggplot2
?tidyr
??tidyr
??ggplot
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
g=ggplot(healthtop10,aes(x=EVTYPE,y=TOTALCASUALTIES,fill=Type))+
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
library(ggplot2,warn.conflicts=FALSE)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
g=ggplot(healthtop10,aes(x=EVTYPE,y=TOTALCASUALTIES,fill=Type))+
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
library(tidyr,warn.conflicts=FALSE)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3],Type,Total,FATALITIES:INJURIES)
g=ggplot(healthtop10,aes(x=EVTYPE,y=Total,fill=Type))+
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3],Type,Total,FATALITIES:INJURIES)
g=ggplot(healthtop10,aes(x=(EVTYPE,+Total),y=Total,fill=Type)) +
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
health.plot
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3],Type,Total,FATALITIES:INJURIES)
g=ggplot(healthtop10,aes(x=reorder(EVTYPE,+Total),y=Total,fill=Type)) +
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3], Type, Total, FATALITIES:INJURIES)
g=ggplot(healthtop10,aes(x=reorder(EVTYPE, +Total),y=Total,fill=Type)) +
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3], Type, Total, FATALITIES:INJURIES)
g=ggplot(healthtop10,aes(x=EVTYPE,y=Total,fill=Type)) +
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3], Total, FATALITIES:INJURIES)
g=ggplot(healthtop10,aes(x=EVTYPE,y=Total)) +
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
?gather
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3], Type, Total)
g=ggplot(healthtop10,aes(x=EVTYPE,y=Total,fill=Type)) +
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
health.plot
health.plot
health.plot
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3], Type, Total, FATALITIES:INJURIES)
g=ggplot(healthtop10,aes((x=EVTYPE, +Total),y=Total,fill=Type)) +
ggtitle("Total Property & Crop Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
?gather
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3], Type, Total, FATALITIES:INJURIES)
g=ggplot(healthtop10,aes((x=EVTYPE +Total),y=Total,fill=Type)) +
ggtitle("Total Economic Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3], Type, Total=FATALITIES:INJURIES)
g=ggplot(healthtop10,aes((x=EVTYPE +Total),y=Total,fill=Type)) +
ggtitle("Total Economic Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
health.plot<-gather(healthtop10[,1:3], Type, FATALITIES:INJURIES)
g=ggplot(healthtop10,aes((x=EVTYPE),y=TOTALCASUALTIES,fill=Type)) +
ggtitle("Total Economic Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
g=ggplot(healthtop10,aes((x=EVTYPE),y=TOTALCASUALTIES) +
ggtitle("Total Economic Damage") +
xlab("Event Type") +
geom_bar(stat="identity", alpha=1)
print(g)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
g=ggplot(healthtop10,aes((x=EVTYPE),y=TOTALCASUALTIES) +
ggtitle("Total Economic Damage") +
xlab("Event Type") +
print(g)
?barplot
barplot(height=healthtop10[FATALITES:INJURIES])
barplot(height=healthtop10[FATALITIES:INJURIES])
barplot(height=healthtop10[,FATALITIES:INJURIES])
barplot(height=healthtop10[,2:3])
barplot(healthtop10[,2:3])
barplot(healthtop10)
healthtop10
barplot(healthtop10[,1:3])
plot(healthtop10[,1:3])
plot(healthtop10)
plot(height=(healthtop10$FATALITIES+healthtop10$INJURIES))
plot(height=(healthtop10$FATALITIES+healthtop10$INJURIES),names.arg=healthtop10$EVTYPE)
plot(height=(healthtop10$FATALITIES+healthtop10$INJURIES),names.arg=healthtop10$EVTYPE,xlab="Event type", ylab="Number of Casualties", ylim=25000,legend=colnames(healthtop10))
?barplot
??melt
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
healthtop10<-melt(healthtop10, id=c("EVTYPE"), measure.vars=c("FATALITIES", "INJURIES"))
ggplot(data=healthtop10t, aes(EVTYPE, value, fill=variable)) + geom_bar(stat="identity") + xlab("Weather Event") + ylab("Total") + ggtitle("Health Impact by Weather Event") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(reshape2,warn.conflicts=FALSE)
stormhealth<-group_by(storm,EVTYPE)
healthsum<-stormhealth%>%summarise_each(funs(sum),FATALITIES,INJURIES)
healthsum$TOTALCASUALTIES<-healthsum$FATALITIES+healthsum$INJURIES
healthtop10<-healthsum[order(healthsum$TOTALCASUALTIES,decreasing=TRUE),][1:10,]
healthtop10<-melt(healthtop10, id=c("EVTYPE"), measure.vars=c("FATALITIES", "INJURIES"))
ggplot(data=healthtop10, aes(EVTYPE, value, fill=variable)) + geom_bar(stat="identity") + xlab("Weather Event") + ylab("Total") + ggtitle("Health Impact by Weather Event") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
econsum<-stormhealth%>%summarise_each(funs(sum),PROPDMG2,CROPDMG2)
econsum$TOTALDMG<-econsum$PROPDMG2+econsum$CROPDMG2
econtop10<-econsum[order(econsum$TOTALDMG,decreasing=TRUE),][1:10,]
econtop10<-melt(econtop10, id=c("EVTYPE"), measure.vars=c("PROPDMG2", "CROPDMG2"))
ggplot(data=econtop10, aes(EVTYPE, value, fill=variable)) + geom_bar(stat="identity") + xlab("Event Type") + ylab("Total $") + ggtitle("Economic Impact by Weather Event") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(storm)
levels(storm$EVTYPE)
levels(storm$EVTYPE)
storm$EVTYPE <- toupper(storm$EVTYPE)
storm$EVTYPE <- gsub(".*HEAT.*", "HEAT", storm$EVTYPE)
storm$EVTYPE <- gsub(".*TSTM.*", "THUNDER STORM", storm$EVTYPE)
storm$EVTYPE <- gsub(".*THUNDERSTORM.*", "THUNDER STORM", storm$EVTYPE)
storm$EVTYPE <- gsub(".*TROPICAL STORM.*", "TROPICAL STORM", storm$EVTYPE)
storm$EVTYPE <- gsub(".*FLOOD.*", "FLOOD", storm$EVTYPE)
storm$EVTYPE <- gsub(".*WIND.*", "WIND", storm$EVTYPE)
storm$EVTYPE <- gsub(".*HURRICANE.*", "HURRICANE", storm$EVTYPE)
storm$EVTYPE <- gsub(".*SNOW.*", "SNOW", storm$EVTYPE)
storm$EVTYPE <- gsub(".*FLD.*", "FLOOD", storm$EVTYPE)
storm$EVTYPE <- gsub(".*FIRE.*", "FIRE", storm$EVTYPE)
storm$EVTYPE <- gsub(".*HAIL.*", "HAIL", storm$EVTYPE)
storm$EVTYPE <- gsub(".*BLIZZARD.*", "BLIZZARD", storm$EVTYPE)
storm$EVTYPE <- gsub(".*COLD.*", "COLD", storm$EVTYPE)
storm$EVTYPE <- gsub(".*WINTER WEATHER.*", "COLD", storm$EVTYPE)
storm$EVTYPE <- gsub(".*RIP.*", "RIP", storm$EVTYPE)
storm$EVTYPE <- gsub(".*FOG.*", "FOG", storm$EVTYPE)
storm$EVTYPE <- gsub(".*AVALANC.*", "AVALANCHE", storm$EVTYPE)
storm$EVTYPE <- gsub(".*RAIN.*", "RAIN", storm$EVTYPE)
storm$EVTYPE <- gsub(".*SURF.*", "SURF", storm$EVTYPE)
storm$EVTYPE <- gsub(".*DRY.*", "DROUGHT", storm$EVTYPE)
storm$EVTYPE <- gsub(".*TORNADO.*", "TORNADO", storm$EVTYPE)
storm$EVTYPE <- gsub(".*SUMMARY.*", "UNKNOWN", storm$EVTYPE)
storm<-storm[!storm$EVTYPE="UNKNOWN"]
storm$EVTYPE <-as.factor(storm$EVTYPE)
?regexp
storm<-storm[storm$EVTYPE<>"UNKNOWN"]
levels(storm$EVTYPE)
storm<-storm[storm$EVTYPE!="UNKNOWN"]
storm<-storm[storm$EVTYPE!="UNKNOWN",]
levels(storm$EVTYPE)
